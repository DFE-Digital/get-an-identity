name: Deploy to Azure

inputs:
  environment_name:
    description: 'The name of the environment'
    required: true
  image_tag:
    description: 'github SHA of the image'
    required: true
  azure_credentials:
    description: 'JSON object containing a service principal that can read from Azure Key Vault'
    required: true
  terraform_vars:
    description: 'Path to the tfvars file for the environment'
    required: true
  terraform_backend_vars:
    description: 'Path to the backend tfvars file for the environment'
    required: true

outputs:
  environment_url:
    description: 'The base URL for the deployed environment'
    value: ${{ steps.terraform.outputs.url }}
  postgres_server_name:
    description: The name of the postgres server deployed
    value: ${{ steps.terraform.outputs.postgres_server_name }}


runs:
  using: composite

  steps:
    - name: Extract configuration from tfvars
      id: config
      run: |
        KEY_VAULT_NAME=$(jq -r '.key_vault_name' $TFVARS)
        RESOURCE_GROUP_NAME=$(jq -r '.resource_group_name' $TFVARS)
        RESOURCE_PREFIX=$(jq -r '.resource_prefix' $TFVARS)

        if [ -z "$KEY_VAULT_NAME" ]; then
          echo "::error ::Failed to extract key_vault_name from $TFVARS"
          exit 1
        fi

        if [ -z "$RESOURCE_GROUP_NAME" ]; then
          echo "::error ::Failed to extract resource_group_name from $TFVARS"
          exit 1
        fi

        if [ -z "$RESOURCE_PREFIX" ]; then
          echo "::error ::Failed to extract resource_prefix from $TFVARS"
          exit 1
        fi

        echo ::set-output name=resource_group_name::$RESOURCE_GROUP_NAME
        echo ::set-output name=key_vault_name::$KEY_VAULT_NAME
        echo ::set-output name=resource_prefix::$RESOURCE_PREFIX

      shell: bash
      env:
        TFVARS: ${{ inputs.terraform_vars }}
      working-directory: terraform

    - uses: Azure/login@v1
      with:
        creds: ${{ inputs.azure_credentials }}

    - uses: Azure/get-keyvault-secrets@v1
      id: get_secrets
      with:
        keyvault: ${{ steps.config.outputs.key_vault_name }}
        secrets: 'TFSTATE-CONTAINER-ACCESS-KEY'

    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.10
        terraform_wrapper: false

    - name: Terraform
      id: terraform
      run: |
        make ci ${{ inputs.environment_name }} terraform-apply
        cd terraform && echo ::set-output name=url::https://$(terraform output -raw auth_server_fqdn)/
        echo ::set-output name=postgres_server_name::$(terraform output -raw postgres_server_name)
        blue_green=$(terraform output -raw blue_green)
        echo ::set-output name=blue_green::$blue_green

        if [ "$blue_green" = "true" ]; then
          echo ::set-output name=slot_name::$(terraform output -raw web_app_slot_name)
        else
          echo ::set-output name=slot_name::production
        fi
      env:
        ARM_ACCESS_KEY: ${{ steps.get_secrets.outputs.TFSTATE-CONTAINER-ACCESS-KEY }}
        TF_VAR_azure_sp_credentials_json: ${{ inputs.azure_credentials }}
        IMAGE_TAG: ${{ inputs.image_tag }}
      shell: bash

    - uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ steps.config.outputs.resource_prefix }}getanid-${{ inputs.environment_name}}-auths-app
        images: ghcr.io/dfe-digital/get-an-identity:authserver-${{ github.sha }}
        slot-name: ${{ steps.terraform.outputs.slot_name }}

    - uses: azure/CLI@v1
      if: ${{ steps.terraform.outputs.blue_green == 'true' }}
      with:
        inlineScript: |
          az webapp deployment slot swap  -g ${{ steps.config.outputs.resource_group_name }} -n ${{ steps.config.outputs.resource_prefix }}getanid-${{ inputs.environment_name}}-auths-app --slot ${{ steps.terraform.outputs.slot_name}} --target-slot production

    - name: Check new site is up
      run: |
        echo "Checking new site is up"
        attempt_counter=0
        max_attempts=60

        SHA_URL="${{ steps.terraform.outputs.url }}_sha"
        APP_SHA=$(curl $SHA_URL --silent)
        until [[ "$EXPECTED_SHA" == "$APP_SHA" ]]; do
            if [ ${attempt_counter} -eq ${max_attempts} ];then
              echo "Max attempts reached"
              exit 1
            fi
            echo "Attempt $attempt_counter: new site not up, retrying in 5 seconds ..."
            sleep 5
            attempt_counter=$(($attempt_counter+1))
            APP_SHA=$(curl $SHA_URL --silent)
        done
      shell: bash
      env:
        EXPECTED_SHA: ${{ inputs.image_tag }}
